stages:
  - stage: Provision
    displayName: Provision Azure resources from ARM template
    jobs:
      - job: Provisioning
        displayName: Provisioning
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: Deploying permanant / stateful resources
            inputs:
              deploymentScope: "Resource Group"
              azureResourceManagerConnection: $(azureResourceManagerConnection)
              subscriptionId: $(subscriptionId)
              location: "North Europe"
              action: "Create Or Update Resource Group"
              resourceGroupName: $(resourceGroupName)
              templateLocation: "Linked artifact"
              csmFile: "arm_permanent/azuredeploy.json"
              overrideParameters: "-projectName $(projectName) -environment $(environment) -keyVaultName $(keyVaultName)"
              deploymentMode: "Incremental"
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: $(azureResourceManagerConnection)
              displayName: Check prerequisites for main resources template
              ScriptType: "InlineScript"
              Inline: |
                Import-Module .\DeploymentHelperFunctions.ps1
                Test-KeyVaultReadiness -KeyVaultName $(keyVaultName) -MandatorySecretsList @('telegramFunctionPermanentKey', 'telegramBotToken')
              FailOnStandardError: true
              azurePowerShellVersion: "LatestVersion"
          - task: AzureKeyVault@1
            inputs:
              azureSubscription: $(azureResourceManagerConnection)
              KeyVaultName: "$(keyVaultName)"
              SecretsFilter: telegramFunctionPermanentKey
              RunAsPreJob: false
          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              deploymentScope: "Resource Group"
              azureResourceManagerConnection: $(azureResourceManagerConnection)
              subscriptionId: $(subscriptionId)
              location: "North Europe"
              action: "Create Or Update Resource Group"
              resourceGroupName: $(resourceGroupName)
              templateLocation: "Linked artifact"
              csmFile: "arm_main/azuredeploy.json"
              overrideParameters: "-projectName $(projectName) -functionAppName $(functionAppName) -telegramFunctionPermanentKey $(telegramFunctionPermanentKey) -keyVaultName $(keyVaultName) -environment $(environment)"
              deploymentMode: "Incremental"
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - bash: |
              if [ -f extensions.csproj ]
              then
                  dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
              fi
            workingDirectory: $(workingDirectory)
            displayName: "Build extensions"
          - task: UsePythonVersion@0
            displayName: "Use Python 3.7"
            inputs:
              versionSpec: 3.7
          - bash: |
              python -m venv worker_venv
              source worker_venv/bin/activate
              pip install -r requirements.txt
            workingDirectory: $(workingDirectory)
            displayName: "Install application dependencies"
          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(workingDirectory)"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop
  - stage: Deploy
    displayName: Deploy stage
    dependsOn:
      - Provision
      - Build
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: $(environment)
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureFunctionApp@1
                  displayName: "Azure functions app deploy"
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    appType: "functionAppLinux"
                    appName: "$(functionAppName)"
                    package: "$(Pipeline.Workspace)/drop/$(Build.BuildId).zip"
                    runtimeStack: "PYTHON|3.7"
      - job: PostDeploySteps
        displayName: Post-deployment operations
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: AzureKeyVault@1
            inputs:
              azureSubscription: $(azureResourceManagerConnection)
              KeyVaultName: "$(keyVaultName)"
              SecretsFilter: "telegramFunctionPermanentKey, telegramBotToken"
              RunAsPreJob: false
          - task: PowerShell@2
            displayName: Register callback WebHook in Telegram API
            inputs:
              targetType: "inline"
              script: |
                Import-Module ./DeploymentHelperFunctions.ps1
                Register-TelegramWebhookUrl -TelegramBotToken $(telegramBotToken) -FunctionAppName $(functionAppName) -FunctionKey $(telegramFunctionPermanentKey)
