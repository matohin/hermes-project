# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - "*"
  paths:
    exclude:
      - "az_pipeline_permanent/*"

variables:
  # Project name
  projectName: "hermes-proj"

  # KeyVault name. Must match KeyVault name form Permanet Infrastructure Pipeline.
  keyVaultName: "hermes-proj-keyvault"

  # Function app name
  functionAppName: "func-$(projectName)"

  # Agent VM image name
  vmImageName: "ubuntu-20.04"

  # Working Directory
  workingDirectory: "$(System.DefaultWorkingDirectory)/"

stages:
  - stage: Provision
    displayName: Provision Azure resources from ARM template
    jobs:
      - job: DeployARM
        displayName: Deploy ARM template
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: AzureKeyVault@1
            inputs:
              azureSubscription: "Azure Pay-As-You-Go"
              KeyVaultName: $(keyVaultName)
              SecretsFilter: "telegramFunctionPermanentKey, telegramBotToken"
              RunAsPreJob: false
          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              deploymentScope: "Resource Group"
              azureResourceManagerConnection: "Azure Pay-As-You-Go"
              subscriptionId: "1192dbda-03e9-417a-8c81-7487e3525752"
              action: "Create Or Update Resource Group"
              resourceGroupName: "rg-hermes-project-dev-00"
              location: "North Europe"
              templateLocation: "Linked artifact"
              csmFile: "az_pipeline_main/azuredeploy.json"
              csmParametersFile: "az_pipeline_main/azuredeploy.parameters.dev.json"
              overrideParameters: "-functionAppName $(functionAppName) -telegramFunctionPermanentKey $(telegramFunctionPermanentKey)"
              deploymentMode: "Complete"

  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - bash: |
              if [ -f extensions.csproj ]
              then
                  dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
              fi
            workingDirectory: $(workingDirectory)
            displayName: "Build extensions"
          - task: UsePythonVersion@0
            displayName: "Use Python 3.7"
            inputs:
              versionSpec: 3.7
          - bash: |
              python -m venv worker_venv
              source worker_venv/bin/activate
              pip install -r requirements.txt
            workingDirectory: $(workingDirectory)
            displayName: "Install application dependencies"
          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(workingDirectory)"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop

  - stage: Deploy
    displayName: Deploy stage
    dependsOn:
      - Provision
      - Build
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: "development"
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureFunctionApp@1
                  displayName: "Azure functions app deploy"
                  inputs:
                    azureSubscription: "Azure Pay-As-You-Go"
                    appType: "functionAppLinux"
                    appName: "$(functionAppName)"
                    package: "$(Pipeline.Workspace)/drop/$(Build.BuildId).zip"
                    runtimeStack: "PYTHON|3.7"
                - task: AzureKeyVault@1
                  inputs:
                    azureSubscription: "Azure Pay-As-You-Go"
                    KeyVaultName: $(keyVaultName)
                    SecretsFilter: "telegramFunctionPermanentKey, telegramBotToken"
                    RunAsPreJob: false
                - task: PowerShell@2
                  inputs:
                    targetType: "inline"
                    script: |
                      # Import-Module .\DeploymentHelperFunctions.ps1
                      # Register-TelegramWebhookUrl -TelegramBotToken $(telegramBotToken) -FunctionAppName $(functionAppName) -FunctionKey $(telegramFunctionPermanentKey)
                      ls | Write-Host
