# Python Function App to Linux on Azure
# Build a Python function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: "610c71ed-2441-4640-9b27-39af858d0ba4"

  # Function app name
  functionAppName: "func-hermes-project-dev-00"

  # Agent VM image name
  vmImageName: "ubuntu-20.04"

  # Working Directory
  workingDirectory: "$(System.DefaultWorkingDirectory)/"

stages:
  - stage: Provision
    displayName: Provision Azure resources from ARM template

    jobs:
      - job: DeployARM
        displayName: Deploy ARM template
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              deploymentScope: "Resource Group"
              azureResourceManagerConnection: "Pay-As-You-Go (1192dbda-03e9-417a-8c81-7487e3525752)"
              subscriptionId: "1192dbda-03e9-417a-8c81-7487e3525752"
              action: "Create Or Update Resource Group"
              resourceGroupName: "rg-hermes-project-dev-00"
              location: "North Europe"
              templateLocation: "Linked artifact"
              csmFile: "arm_templates/azuredeploy.json"
              csmParametersFile: "arm_templates/azuredeploy.parameters.dev-00.json"
              deploymentMode: "Incremental"
              deploymentOutputs: 'functionsAppServicePlanOutputs'
          - pwsh: Write-Host $env:functionsAppServicePlanOutputs

  - stage: Build
    displayName: Build stage

    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)

        steps:
          - bash: |
              if [ -f extensions.csproj ]
              then
                  dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
              fi
            workingDirectory: $(workingDirectory)
            displayName: "Build extensions"

    #       - task: UsePythonVersion@0
    #         displayName: "Use Python 3.6"
    #         inputs:
    #           versionSpec: 3.6 # Functions V2 supports Python 3.6 as of today

    #       - bash: |
    #           python -m venv worker_venv
    #           source worker_venv/bin/activate
    #           pip install -r requirements.txt
    #         workingDirectory: $(workingDirectory)
    #         displayName: "Install application dependencies"

    #       - task: ArchiveFiles@2
    #         displayName: "Archive files"
    #         inputs:
    #           rootFolderOrFile: "$(workingDirectory)"
    #           includeRootFolder: false
    #           archiveType: zip
    #           archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    #           replaceExistingArchive: true

    #       - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    #         artifact: drop

  - stage: Deploy
    displayName: Deploy stage $(functionsAppServicePlanOutputs)
    dependsOn:
      - Provision
      - Build
    condition: succeeded()

    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: "development"
        pool:
          vmImage: $(vmImageName)

        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureFunctionApp@1
                  displayName: "Azure functions app deploy"
                  inputs:
                    azureSubscription: "Pay-As-You-Go (1192dbda-03e9-417a-8c81-7487e3525752)"
                    appType: "functionAppLinux"
                    appName: "func-rg-hermes-project-dev-00"
                    package: "$(Pipeline.Workspace)/drop/$(Build.BuildId).zip"
                    runtimeStack: "PYTHON|3.7"
